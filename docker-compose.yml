# version: "3.9"

# services:
#   db:
#     image: postgres:17
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: admin
#     volumes:
#       - pgdata:/var/lib/postgresql/data
#       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#     ports:
#       - "5432:5432"

#   app:
#     build: .
#     depends_on:
#       db:
#         condition: service_started
#       ollama:
#         condition: service_healthy
#     environment:
#       DATABASE_URL: postgresql://postgres:admin@db:5432/AI_agent
#     env_file:
#       - .env 
#     volumes:
#       - .:/app
#     ports:
#       - "8000:8000"

#   create_db:
#     build: .
#     depends_on:
#       - db
#     environment:
#       DATABASE_URL: postgresql://postgres:admin@db:5432/AI_agent
#     volumes:
#       - .:/app
#     command: ["sh", "-c", "python wait_for_postgres.py db AI_agent postgres admin && python create_db.py"]

#   seed_dbinit:
#     build: .
#     depends_on:
#       - db
#     environment:
#       DATABASE_URL: postgresql://postgres:admin@db:5432/dbinit
#     volumes:
#       - .:/app
#     command: ["sh", "-c", "python wait_for_postgres.py db dbinit postgres admin && python retail_db/dbinit.py"]

#   minio:
#     image: minio/minio
#     container_name: minio
#     ports:
#       - "9000:9000"
#       - "9001:9001"
#     volumes:
#       - minio_data:/data

#     env_file:
#       - .env 
#     command: server /data --console-address ":9001"
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
#       interval: 5s
#       timeout: 5s
#       retries: 5

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
#     container_name: elasticsearch
#     environment:
#       - discovery.type=single-node
#       - ES_JAVA_OPTS=-Xms512m -Xmx512m
#     ports:
#       - "9200:9200"
#     volumes:
#       - es_data:/usr/share/elasticsearch/data

#   kibana:
#     image: docker.elastic.co/kibana/kibana:7.17.22
#     container_name: kibana
#     ports:
#       - "5601:5601"
#     environment:
#       - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#     depends_on:
#       - elasticsearch

#   ollama:
#     build:
#       context: .
#       dockerfile: Dockerfile.ollama
#     container_name: ollama
#     ports:
#       - "11434:11434"
#     volumes:
#       - ollama_models:/root/.ollama
#       - ollama_logs:/logs
#     restart: unless-stopped
#     entrypoint: ["/bin/sh", "/start_ollama.sh"]
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
#       interval: 10s
#       timeout: 5s
#       retries: 30

#   init_minio:
#     build:
#       context: .
#       dockerfile: Dockerfile.init_minio
#     depends_on:
#       minio:
#         condition: service_healthy
#     env_file:
#       - .env

# volumes:
#   pgdata:
#   minio_data:
#   es_data:
#   ollama_models:
#   ollama_logs:
  



version: "3.9"

networks:
  ai_net:
    driver: bridge

services:
  db:
    image: postgres:17
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai_net

  app:
    build: .
    container_name: fastapi_app
    depends_on:
      db:
        condition: service_started
      ollama:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    networks:
      - ai_net

  create_db:
    build: .
    container_name: create_db
    depends_on:
      - db
    env_file:
      - .env
    volumes:
      - .:/app
    command: ["sh", "-c", "python wait_for_postgres.py db ${POSTGRES_DB} ${POSTGRES_USER} ${POSTGRES_PASSWORD} && python create_db.py"]
    networks:
      - ai_net

  seed_dbinit:
    build: .
    container_name: seed_dbinit
    depends_on:
      - db
    env_file:
      - .env
    volumes:
      - .:/app
    command: ["sh", "-c", "python wait_for_postgres.py db dbinit ${POSTGRES_USER} ${POSTGRES_PASSWORD} && python retail_db/dbinit.py"]
    networks:
      - ai_net

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    env_file:
      - .env
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ai_net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.22
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    env_file:
      - .env
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - ai_net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.22
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ai_net

  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    container_name: ollama
    ports:
      - "${OLLAMA_PORT}:11434"
    volumes:
      - ollama_models:/root/.ollama
      - ollama_logs:/logs
    restart: unless-stopped
    entrypoint: ["/bin/sh", "/start_ollama.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - ai_net

  init_minio:
    build:
      context: .
      dockerfile: Dockerfile.init_minio
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - ai_net
  waf:
    image: owasp/modsecurity-crs:nginx
    container_name: waf
    ports:
      - "8080:80"   # ton app sera dispo via http://localhost:8080
    depends_on:
      - app
    environment:
      - PROXY_PASS=http://app:8000
    networks:
      - ai_net
      
volumes:
  pgdata:
  minio_data:
  es_data:
  ollama_models:
  ollama_logs:
